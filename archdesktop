#!/usr/bin/env bash

# Check if the script is run as root
if [ "$EUID" -ne 0 ]; then
    echo "This script must be run as root. Please use sudo or log in as root."
    exit 1
fi

# define foreground colors
red="\033[0;31m"
green="\033[0;32m"

# reset all text attributes
nc="\033[0m"

# export variables
export DIALOGRC=./dialog/dialogrc

# remove temporary files if any
rm -f /tmp/archdesktop.*

# dialog sizes
height=20
width=60
listHeight=5

# desktop_base
function desktop_base() {
  folder_path="./data/DesktopBaseDir"
  files=("$folder_path"/*)
  menu_items=()
  for file in "${files[@]}"; do
    menu_items+=("$(basename "$file")" "")
  done
  menu_items+=("Back" "")
  selected_file=$(dialog --no-cancel --title " Desktop-Base + Common packages " \
  --menu "<Enter> activates" $height $width $listHeight \
  "${menu_items[@]}" 3>&2 2>&1 1>&3)
}

# desktop_env
function desktop_env() {
  folder_path="./data/DesktopEnvironmentDir"
  files=("$folder_path"/*)
  menu_items=()
  for file in "${files[@]}"; do
    menu_items+=("$(basename "$file")" "")
  done
  menu_items+=("Back" "")
  selected_file=$(dialog --no-cancel --title " Desktop Environment " \
  --menu "<Enter> activates" $height $width $listHeight \
  "${menu_items[@]}" 3>&2 2>&1 1>&3)
}

# extra_packages
function extra_packages() {
  folder_path="./data/ExtraPackagesDir"
  files=("$folder_path"/*)
  menu_items=()
  for file in "${files[@]}"; do
    menu_items+=("$(basename "$file")" "")
  done
  menu_items+=("Back" "")
  selected_file=$(dialog --no-cancel --title " Extra Packages " \
  --menu "<Enter> activates" $height $width $listHeight \
  "${menu_items[@]}" 3>&2 2>&1 1>&3)
}

# service
function service() {
  service_menu=$(dialog --no-cancel --title " Service " \
  --menu "<Enter> activates" $height $width $listHeight \
  "Boot Target" "" \
  "Display Manager" "" \
  "Avahi" "" \
  "Bluetooth" "" \
  "Cups" "" \
  "Firewalld" "" \
  "Network Manager" "" \
  "Reflector" "" \
  "Ssh" "" \
  "Upower" "" \
  "Back" "" 3>&2 2>&1 1>&3)
}

# boot_target
function boot_target() {
  dialog --title " Boot Target " \
  --radiolist "<Tab> moves: <Space> selects: <Enter> activates" $height $width $listHeight \
  "graphical.target" "" on \
  "multi-user.target" "" off 2> $(mktemp /tmp/archdesktop.btsrv.XXXXXX)
}

# display_manager
function display_manager() {
  dialog --title " Display Manager " \
  --radiolist "<Tab> moves: <Space> selects: <Enter> activates" $height $width $listHeight \
  "gdm.service" "" on \
  "lightdm.service" "" off \
  "sddm.service" "" off 2> $(mktemp /tmp/archdesktop.dmsrv.XXXXXX)
}

# avahi
function avahi() {
  dialog --title " Avahi " \
  --checklist "<Tab> moves: <Space> selects: <Enter> activates" $height $width $listHeight \
  "avahi-daemon.service" "" on 2> $(mktemp /tmp/archdesktop.srv.XXXXXX)
}

# bluetooth
function bluetooth() {
  dialog --title " Bluetooth " \
  --checklist "<Tab> moves: <Space> selects: <Enter> activates" $height $width $listHeight \
  "bluetooth.service" "" on 2> $(mktemp /tmp/archdesktop.srv.XXXXXX)
}

# cups
function cups() {
  dialog --title " Cups " \
  --checklist "<Tab> moves: <Space> selects: <Enter> activates" $height $width $listHeight \
  "cups.service" "" on 2> $(mktemp /tmp/archdesktop.srv.XXXXXX)
}

# firewalld
function firewalld() {
  dialog --title " Firewalld " \
  --checklist "<Tab> moves: <Space> selects: <Enter> activates" $height $width $listHeight \
  "firewalld.service" "" on 2> $(mktemp /tmp/archdesktop.srv.XXXXXX)
}

# network_manager
function network_manager() {
  dialog --title " Network Manager " \
  --checklist "<Tab> moves: <Space> selects: <Enter> activates" $height $width $listHeight \
  "NetworkManager.service" "" on 2> $(mktemp /tmp/archdesktop.srv.XXXXXX)
}

# reflector
function reflector() {
  dialog --title " Reflector " \
  --checklist "<Tab> moves: <Space> selects: <Enter> activates" $height $width $listHeight \
  "reflector.service" "" on 2> $(mktemp /tmp/archdesktop.srv.XXXXXX)
}

# ssh
function ssh() {
  dialog --title " Ssh " \
  --checklist "<Tab> moves: <Space> selects: <Enter> activates" $height $width $listHeight \
  "sshd.service" "" on 2> $(mktemp /tmp/archdesktop.srv.XXXXXX)
}

# upower
function upower() {
  dialog --title " Upower " \
  --checklist "<Tab> moves: <Space> selects: <Enter> activates" $height $width $listHeight \
  "upower.service" "" on 2> $(mktemp /tmp/archdesktop.srv.XXXXXX)
}

# main_menu in loop
while true; do
    main_menu=$(dialog --no-cancel --title " Arch Desktop " \
    --menu "<Enter> activates" $height $width $listHeight \
    "Desktop-Base + Common packages" "" \
    "Desktop Environment" "" \
    "Extra Packages" "" \
    "Service" "" \
    "Intall packages / Enable services" "" \
    "Remove packages / Disable services" "" \
    "Quit" "" 3>&2 2>&1 1>&3)

  if [ "$main_menu" == "Desktop-Base + Common packages" ]; then
    while true; do
      desktop_base
      if [ "$selected_file" != "Back" ]; then
        dialog --title " $selected_file " \
        --checklist "<Tab> moves: <Space> selects: <Enter> activates" $height $width $listHeight \
        $(awk '{print $1, "pkg", "on"}' "$folder_path/$selected_file") 2> $(mktemp /tmp/archdesktop.pkg.XXXXXX)
      else
        break
      fi
    done
  elif [ "$main_menu" == "Desktop Environment" ]; then
    while true; do
      desktop_env
      if [ "$selected_file" != "Back" ]; then
        dialog --title " $selected_file " \
        --checklist "<Tab> moves: <Space> selects: <Enter> activates" $height $width $listHeight \
        $(awk '{print $1, "pkg", "on"}' "$folder_path/$selected_file") 2> $(mktemp /tmp/archdesktop.pkg.XXXXXX)
      else
        break
      fi
    done
  elif [ "$main_menu" == "Extra Packages" ]; then
    while true; do
      extra_packages
      if [ "$selected_file" != "Back" ]; then
        dialog --title " $selected_file " \
        --checklist "<Tab> moves: <Space> selects: <Enter> activates" $height $width $listHeight \
        $(awk '{print $1, "pkg", "on"}' "./data/ExtraPackagesDir/$selected_file") 2> $(mktemp /tmp/archdesktop.pkg.XXXXXX)
      else
        break
      fi
    done
  elif [ "$main_menu" == "Service" ]; then
    while true; do
      service
      if [ "$service_menu" != "Back" ]; then
        if [ "$service_menu" == "Boot Target" ]; then
          boot_target
        elif [ "$service_menu" == "Display Manager" ]; then
          display_manager
        elif [ "$service_menu" == "Avahi" ]; then
          avahi
        elif [ "$service_menu" == "Bluetooth" ]; then
          bluetooth
        elif [ "$service_menu" == "Cups" ]; then
          cups
        elif [ "$service_menu" == "Firewalld" ]; then
          firewalld
        elif [ "$service_menu" == "Network Manager" ]; then
          network_manager
        elif [ "$service_menu" == "Reflector" ]; then
          reflector
        elif [ "$service_menu" == "Ssh" ]; then
          ssh
        elif [ "$service_menu" == "Upower" ]; then
          upower
        fi
      else
        break
      fi
    done
  elif [ "$main_menu" == "Intall packages / Enable services" ]; then
    # if files unite them
    list_pkg=$(ls -1 /tmp/archdesktop.pkg.* | grep /tmp/archdesktop.pkg.)
    if [ -n "$list_pkg" ]; then
      awk -v ORS='\n' '{ for (i = 1; i <= NF; i++) print $i }' /tmp/archdesktop.pkg.* >> $(mktemp /tmp/archdesktop.allpkg.XXXXXX)
      sort /tmp/archdesktop.allpkg.*  | uniq > $(mktemp /tmp/archdesktop.allsortuniqpkg.XXXXXX)
    fi
    list_btsrv=$(ls -1 /tmp/archdesktop.btsrv.* | grep /tmp/archdesktop.btsrv.)
    if [ -n "$list_btsrv" ]; then
      awk -v ORS='\n' '{ for (i = 1; i <= NF; i++) print $i }' /tmp/archdesktop.btsrv.* >> $(mktemp /tmp/archdesktop.allbtsrv.XXXXXX)
      sort /tmp/archdesktop.allbtsrv.*  | uniq > $(mktemp /tmp/archdesktop.allsortuniqbtsrv.XXXXXX)
    fi
    list_dmsrv=$(ls -1 /tmp/archdesktop.dmsrv.* | grep /tmp/archdesktop.dmsrv.)
    if [ -n "$list_dmsrv" ]; then
      awk -v ORS='\n' '{ for (i = 1; i <= NF; i++) print $i }' /tmp/archdesktop.dmsrv.* >> $(mktemp /tmp/archdesktop.alldmsrv.XXXXXX)
      sort /tmp/archdesktop.alldmsrv.*  | uniq > $(mktemp /tmp/archdesktop.allsortuniqdmsrv.XXXXXX)
    fi
    list_srv=$(ls -1 /tmp/archdesktop.srv.* | grep /tmp/archdesktop.srv.)
    if [ -n "$list_srv" ]; then
      awk -v ORS='\n' '{ for (i = 1; i <= NF; i++) print $i }' /tmp/archdesktop.srv.* >> $(mktemp /tmp/archdesktop.allsrv.XXXXXX)
      sort /tmp/archdesktop.allsrv.*  | uniq > $(mktemp /tmp/archdesktop.allsortuniqsrv.XXXXXX)
    fi

    # check files if are empty or not
    if [ -s /tmp/archdesktop.allsortuniqpkg.* ]; then
      check_pkg="not empty"
    else
      check_pkg="empty"
    fi
    if [ -s /tmp/archdesktop.allsortuniqbtsrv.* ]; then
      check_btsrv="not empty"
    else
      check_btsrv="empty"
    fi
    if [ -s /tmp/archdesktop.allsortuniqdmsrv.* ]; then
      check_dmsrv="not empty"
    else
      check_dmsrv="empty"
    fi
    if [ -s /tmp/archdesktop.allsortuniqsrv.* ]; then
      check_srv="not empty"
    else
      check_srv="empty"
    fi

    # if at least one file is not empty then
    if [ "$check_pkg" == "not empty" ] || [ "$check_btsrv" == "not empty" ] || [ "$check_dmsrv" == "not empty" ] || [ "$check_srv" == "not empty" ]; then
      clear
      if [ "$check_pkg" == "not empty" ]; then
        echo "Installing selected packages..."
        pacman -Syy archlinux-keyring --noconfirm
        pacman -S --needed - < /tmp/archdesktop.allsortuniqpkg.*
      fi
      if [ "$check_srv" == "not empty" ]; then
          echo "Enabling services..."
          systemctl enable $(cat /tmp/archdesktop.allsortuniqsrv.*)
      fi
      rm -f /tmp/archdesktop.*
      echo -e "${green}All operations have been completed. You may now reboot.${nc}"
      exit
    else
      dialog --title " Info " --msgbox "You must select at least one package or service!" 7 35
      rm -f /tmp/archdesktop.*
    fi
  elif [ "$main_menu" == "Remove packages / Disable services" ]; then
    awk -v ORS='\n' '{ for (i = 1; i <= NF; i++) print $i }' /tmp/archdesktop.pkg.* >> $(mktemp /tmp/archdesktop.allpkg.XXXXXX)
    sort /tmp/archdesktop.allpkg.*  | uniq > $(mktemp /tmp/archdesktop.allsortuniqpkg.XXXXXX)
    pacman -Qq | sort > $(mktemp /tmp/archdesktop.installedpkg.XXXXXX)
    comm -12 /tmp/archdesktop.allsortuniqpkg.* /tmp/archdesktop.installedpkg.* > $(mktemp /tmp/archdesktop.removepkg.XXXXXX)
    clear
    echo "Removing selected packages..."
    if [ $(grep -x networkmanager /tmp/archdesktop.removepkg.*) ]; then
      echo -e "${red}If you remove networkmanager, you may be left without internet access!${nc}"
      read -p "Do you want to remove networkmanager? [y/N] " nm
      if [ "$nm" == "y" ]; then
        pacman -Rcns - < /tmp/archdesktop.removepkg.*
      else
        cat /tmp/archdesktop.removepkg.* | grep -v -x networkmanager > $(mktemp /tmp/archdesktop.removepkgnonm.XXXXXX)
        pacman -Rcns - < /tmp/archdesktop.removepkgnonm.*
      fi
    else
      pacman -Rcns - < /tmp/archdesktop.removepkg.*
    fi
    rm -f /tmp/archdesktop.*
    echo -e "${green}All operations have been completed. You may now reboot.${nc}"
    exit
  elif [ "$main_menu" == "Quit" ]; then
    rm -f /tmp/archdesktop.*
    clear
    exit
  fi
done
